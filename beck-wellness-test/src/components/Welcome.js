import React, { useState, useEffect, useRef } from 'react';
import '../styles/Welcome.css';
import Footer from './Footer';

// Updated compliments with specific facts about Anna
const compliments = [
  "–ê–Ω—ñ—á–∫–∞, —Ç–≤–æ—è –ø–æ–¥–æ—Ä–æ–∂ –¥–æ –°–®–ê —É 2021 —Ä–æ—Ü—ñ –ø–æ–∫–∞–∑—É—î —Ç–≤–æ—é —Å–º—ñ–ª–∏–≤—ñ—Å—Ç—å! üíñ",
  "–¢–∏ –Ω–∞–π–∫—Ä–∞—â–∞ –≥–æ—Å–ø–æ–¥–∏–Ω—è –¥–ª—è –ê–ª–µ–∫—Å–∏ —Ç–∞ –°—ñ—Ä—ñ! –Ø–∫—ñ —á—É–¥–æ–≤—ñ –∫–æ—Ç–∏–∫–∏! üò∫",
  "–¢–≤–æ—è –Ω–∞–ø–æ–ª–µ–≥–ª–∏–≤—ñ—Å—Ç—å —É –≤–∏–≤—á–µ–Ω–Ω—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –Ω–∞–¥–∏—Ö–∞—î! üåü",
  "–¢–∏ —Ç–∞–∫–∞ —Å–∏–ª—å–Ω–∞ –∂—ñ–Ω–∫–∞ –∑ –ö–∞–ª–∏–Ω–æ–≤–∞, –õ—å–≤—ñ–≤—Å—å–∫–æ—ó –æ–±–ª–∞—Å—Ç—ñ! üí™",
  "–¢–≤–æ—è –ª—é–±–æ–≤ –¥–æ –£–∫—Ä–∞—ó–Ω–∏ —ñ –Ω–µ–Ω–∞–≤–∏—Å—Ç—å –¥–æ –ü—É—Ç—ñ–Ω–∞ –ø–æ–∫–∞–∑—É—î —Ç–≤—ñ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä! üá∫üá¶",
  "–¢–≤–æ—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –°–µ—Ä–≥—ñ—è –°—Ç–µ—Ä–Ω–µ–Ω–∫–∞ –¥–æ–≤–æ–¥–∏—Ç—å —Ç–≤–æ—é –≥—Ä–æ–º–∞–¥—è–Ω—Å—å–∫—É –ø–æ–∑–∏—Ü—ñ—é! üëè",
  "–ñ–∏—Ç—Ç—è –≤ –ù–∞–π–ª—Å—ñ –∑ –∫–æ—Ö–∞–Ω–∏–º —ñ –∫–æ—Ç–∏–∫–∞–º–∏ - —Ç–≤–æ—î –º–∞–ª–µ–Ω—å–∫–µ —â–∞—Å—Ç—è! ‚ù§Ô∏è",
  "–¢–∏ –Ω–∞–π–∫—Ä–∞—Å–∏–≤—ñ—à–∞ —É–∫—Ä–∞—ó–Ω–∫–∞ –≤ —É—Å—å–æ–º—É –ù–∞–π–ª—Å—ñ! üåπ",
  "–ö–æ–∂–µ–Ω –¥–µ–Ω—å –∑ —Ç–æ–±–æ—é - —Ü–µ –ø—Ä–∏–≥–æ–¥–∞ —ñ —Ä–∞–¥—ñ—Å—Ç—å! ‚ú®",
  "–¢–≤–æ—è –ø–æ—Å–º—ñ—à–∫–∞ —Ä–æ–±–∏—Ç—å –ù–∞–π–ª—Å —è—Å–∫—Ä–∞–≤—ñ—à–∏–º –º—ñ—Å—Ç–æ–º! ‚òÄÔ∏è",
  "–¢–∏ –ø—Ä–∏–Ω–æ—Å–∏—à —á–∞—Å—Ç–∏–Ω–∫—É –£–∫—Ä–∞—ó–Ω–∏ –¥–æ –Ω–∞—à–æ–≥–æ –¥–æ–º—É —â–æ–¥–Ω—è! üè°",
  "–¢–∏ –Ω–∞–π—Å–º—ñ–ª–∏–≤—ñ—à–∞, –ø–µ—Ä–µ—ó—Ö–∞–≤—à–∏ —á–µ—Ä–µ–∑ –æ–∫–µ–∞–Ω —É –Ω–æ–≤—É –∫—Ä–∞—ó–Ω—É! üåä",
  "–ê–ª–µ–∫—Å–∞ —ñ –°—ñ—Ä—ñ –æ–±–æ–∂–Ω—é—é—Ç—å —Å–≤–æ—é –º–∞–º—É-—É–∫—Ä–∞—ó–Ω–∫—É! üê±",
  "–¢–≤–æ—è –Ω–µ–Ω–∞–≤–∏—Å—Ç—å –¥–æ –¢—Ä–∞–º–ø–∞ –ø–æ–∫–∞–∑—É—î —Ç–≤—ñ–π –≥–∞—Ä–Ω–∏–π —Å–º–∞–∫! üòÑ",
  "–ö–∞–ª–∏–Ω—ñ–≤ –ø–∏—à–∞—î—Ç—å—Å—è —Ç–∞–∫–æ—é —á—É–¥–æ–≤–æ—é –¥–æ—á–∫–æ—é —è–∫ —Ç–∏! üåª"
];

const Welcome = ({ startQuiz, darkMode, toggleDarkMode }) => {
  const [activeCompliments, setActiveCompliments] = useState([]);
  const heartRef = useRef(null);
  const timerRef = useRef(null);
  const [heartBeat, setHeartBeat] = useState(false);

  // Function to add a new floating compliment
  const addCompliment = () => {
    if (!heartRef.current) return;
    
    // Get heart position
    const heartRect = heartRef.current.getBoundingClientRect();
    const heartCenterX = heartRect.left + heartRect.width / 2;
    const heartCenterY = heartRect.top + heartRect.height / 2;
    
    // Generate random x offset for non-straight movement
    const xOffset = Math.random() * 200 - 100; // Random value between -100 and 100
    
    const newCompliment = {
      id: Date.now(),
      text: compliments[Math.floor(Math.random() * compliments.length)],
      x: heartCenterX,
      y: heartCenterY,
      xOffset: xOffset,
      duration: Math.random() * 3 + 6 // Random duration between 6-9 seconds
    };
    
    setActiveCompliments(prev => [...prev, newCompliment]);
    
    // Remove compliment after animation completes (longer duration)
    setTimeout(() => {
      setActiveCompliments(prev => prev.filter(c => c.id !== newCompliment.id));
    }, newCompliment.duration * 1000); // Convert seconds to milliseconds
  };

  // Heart beat effect
  useEffect(() => {
    const pulsateInterval = setInterval(() => {
      setHeartBeat(true);
      setTimeout(() => setHeartBeat(false), 300);
      
      // Add new compliment on heartbeat with reduced frequency
      if (Math.random() > 0.6) { // 40% chance to show a compliment
        addCompliment();
      }
    }, 5000); // Increased interval to 5 seconds
    
    return () => clearInterval(pulsateInterval);
  }, []);

  const handleHeartClick = () => {
    // Force add a compliment on click
    addCompliment();
  };

  return (
    <div className={`welcome-container ${darkMode ? 'dark' : ''}`} style={{ 
      color: darkMode ? '#eee' : '#333',
      boxShadow: darkMode ? '0 4px 15px rgba(0, 0, 0, 0.5)' : '0 4px 15px rgba(0, 0, 0, 0.1)'
    }}>
      {/* Background elements */}
      <div className="welcome-background">
        {[...Array(5)].map((_, i) => (
          <div 
            key={i} 
            className="bg-circle" 
            style={{ 
              width: `${Math.random() * 200 + 100}px`,
              height: `${Math.random() * 200 + 100}px`,
              left: `${Math.random() * 80}%`,
              top: `${Math.random() * 80}%`,
              background: darkMode 
                ? `rgba(${Math.floor(Math.random() * 30 + 50)}, ${Math.floor(Math.random() * 30 + 80)}, ${Math.floor(Math.random() * 50 + 150)}, 0.3)` 
                : `rgba(${Math.floor(Math.random() * 100 + 150)}, ${Math.floor(Math.random() * 100 + 100)}, ${Math.floor(Math.random() * 100 + 150)}, 0.2)`,
              animationDuration: `${Math.random() * 10 + 15}s`,
              animationDelay: `${Math.random() * 5}s`
            }}
          />
        ))}
      </div>

      {/* Floating compliments */}
      {activeCompliments.map(compliment => (
        <div 
          key={compliment.id}
          className="floating-compliment"
          style={{
            left: compliment.x,
            top: compliment.y,
            background: darkMode ? 'rgba(40,40,40,0.8)' : 'rgba(255,255,255,0.8)',
            color: darkMode ? '#fff' : '#333',
            animationDuration: `${compliment.duration}s`,
            '--x-offset': `${compliment.xOffset}px`
          }}
        >
          {compliment.text}
        </div>
      ))}

      <button 
        onClick={toggleDarkMode} 
        className="dark-mode-toggle"
        style={{ color: darkMode ? '#fff' : '#333' }}
        aria-label={darkMode ? "–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–≤—ñ—Ç–ª—É —Ç–µ–º—É" : "–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ç–µ–º–Ω—É —Ç–µ–º—É"}
      >
        {darkMode ? '‚òÄÔ∏è' : 'üåô'}
      </button>
      
      <div className="welcome-emoji-container">
        <span className="welcome-emoji">üß†</span>
        <span className="welcome-emoji">üí≠</span>
        <span className="welcome-emoji">üí´</span>
      </div>
      
      <h1 className="welcome-title" style={{ color: darkMode ? '#fff' : '#333' }}>
        –í—ñ—Ç–∞—î–º–æ —É –ï–º–æ—Ü—ñ–π–Ω–æ–º—É —á–µ–∫-—ñ–Ω—ñ
      </h1>
      
      <p className="welcome-text">
        –¶–µ–π —Ç–µ—Å—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –æ—Ü—ñ–Ω–∏—Ç–∏ —Å–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π –µ–º–æ—Ü—ñ–π–Ω–∏–π —Å—Ç–∞–Ω —Ç–∞ —Ä—ñ–≤–µ–Ω—å –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–æ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á—á—è.
      </p>
      
      <ul className="welcome-list">
        <li className="welcome-list-item">–¢–µ—Å—Ç –º—ñ—Å—Ç–∏—Ç—å 21 –ø–∏—Ç–∞–Ω–Ω—è</li>
        <li className="welcome-list-item">–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —á–µ—Å–Ω–æ, “ë—Ä—É–Ω—Ç—É—é—á–∏—Å—å –Ω–∞ –≤–∞—à–æ–º—É —Å–∞–º–æ–ø–æ—á—É—Ç—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 2 —Ç–∏–∂–Ω—ñ</li>
        <li className="welcome-list-item">–ü—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–∞–π–º–µ –±–ª–∏–∑—å–∫–æ 5 —Ö–≤–∏–ª–∏–Ω</li>
        <li className="welcome-list-item">–í–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ —Ç–∞ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è</li>
      </ul>
      
      <div className="welcome-bubbles">
        {[...Array(15)].map((_, i) => (
          <div 
            key={i} 
            className="bubble" 
            style={{ 
              left: `${Math.random() * 100}%`, 
              animationDuration: `${Math.random() * 5 + 5}s`,
              animationDelay: `${Math.random() * 3}s`,
              background: darkMode ? 
                `rgba(${Math.floor(Math.random() * 55) + 50}, ${Math.floor(Math.random() * 55) + 100}, ${Math.floor(Math.random() * 55) + 150}, 0.2)` :
                `rgba(${Math.floor(Math.random() * 55) + 150}, ${Math.floor(Math.random() * 55) + 200}, ${Math.floor(Math.random() * 55) + 200}, 0.3)`
            }}
          />
        ))}
      </div>
      
      <button 
        onClick={startQuiz}
        className="welcome-button"
        style={{
          boxShadow: darkMode ? '0 4px 12px rgba(52, 152, 219, 0.4)' : '0 4px 8px rgba(52, 152, 219, 0.2)'
        }}
      >
        –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç
      </button>

      <div className="welcome-message">
        –ó –ª—é–±–æ–≤'—é –¥–ª—è —á–∞—Ä—ñ–≤–Ω–æ—ó –ê–Ω—ñ—á–∫–∏ üíñ
        <span>–¢–∏ –Ω–∞–π–ø—Ä–µ–∫—Ä–∞—Å–Ω—ñ—à–∞, –Ω–∞–π–¥–∏–≤–æ–≤–∏–∂–Ω—ñ—à–∞ —Ç–∞ –Ω–∞–π—Ç–∞–ª–∞–Ω–æ–≤–∏—Ç—ñ—à–∞!</span>
        <span>–¢–≤–æ—è –ø–æ—Å–º—ñ—à–∫–∞ –æ—Å–≤—ñ—Ç–ª—é—î –≤–µ—Å—å —Å–≤—ñ—Ç ‚ú®</span>
      </div>
      
      <button 
        className={`heart-button ${heartBeat ? 'beating' : ''}`} 
        onClick={handleHeartClick}
        ref={heartRef}
      >
        ‚ù§Ô∏è
      </button>
      
      <div className="welcome-footer-wrapper">
        <Footer darkMode={darkMode} />
      </div>
    </div>
  );
};

export default Welcome; 